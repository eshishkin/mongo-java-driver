<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MongoDB JVM Drivers</title>
    <link>/mongo-java-driver/4.3/</link>
    <description>Recent content on MongoDB JVM Drivers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2020 15:50:55 +0000</lastBuildDate>
    
	<atom:link href="/mongo-java-driver/4.3/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>API Documentation</title>
      <link>/mongo-java-driver/4.3/apidocs/</link>
      <pubDate>Tue, 28 Jan 2020 15:50:55 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/apidocs/</guid>
      <description> API Documentation The following API documentation is available:
 Java Driver (modern API) Java Driver (legacy API) Java Reactive Streams Driver Scala Driver Bson (The bson layer) Core (The shared core classes)  </description>
    </item>
    
    <item>
      <title>Client Side Encryption</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/client-side-encryption/</link>
      <pubDate>Thu, 13 Jun 2019 09:00:01 +0100</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/client-side-encryption/</guid>
      <description>Client Side Encryption New in MongoDB 4.2 client side encryption allows administrators and developers to encrypt specific data fields in addition to other MongoDB encryption features.
With field level encryption, developers can encrypt fields client side without any server-side configuration or directives. Client-side field level encryption supports workloads where applications must guarantee that unauthorized parties, including server administrators, cannot read the encrypted data.
important This guide uses the Subscriber implementations as covered in the Quick Start Primer.</description>
    </item>
    
    <item>
      <title>Client Side Encryption</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/client-side-encryption/</link>
      <pubDate>Thu, 13 Jun 2019 09:00:01 +0100</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/client-side-encryption/</guid>
      <description>Client Side Encryption New in MongoDB 4.2 client side encryption allows administrators and developers to encrypt specific data fields in addition to other MongoDB encryption features.
With field level encryption, developers can encrypt fields client side without any server-side configuration or directives. Client-side field level encryption supports workloads where applications must guarantee that unauthorized parties, including server administrators, cannot read the encrypted data.
important Support for client side encryption is in beta.</description>
    </item>
    
    <item>
      <title>Client Side Encryption</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/client-side-encryption/</link>
      <pubDate>Thu, 13 Jun 2019 09:00:01 +0100</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/client-side-encryption/</guid>
      <description>Client Side Encryption New in MongoDB 4.2 client side encryption allows administrators and developers to encrypt specific data fields in addition to other MongoDB encryption features.
With field level encryption, developers can encrypt fields client side without any server-side configuration or directives. Client-side field level encryption supports workloads where applications must guarantee that unauthorized parties, including server administrators, cannot read the encrypted data.
Installation The recommended way to get started using field level encryption in your project is with a dependency management system.</description>
    </item>
    
    <item>
      <title>Change Streams</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/change-streams/</link>
      <pubDate>Tue, 15 Aug 2017 14:19:24 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/change-streams/</guid>
      <description>Change Streams MongoDB 3.6 introduces a new $changeStream aggregation pipeline operator.
Change streams provide a way to watch changes to documents in a collection. To improve the usability of this new stage, the MongoCollection API includes a new watch method. The ChangeStreamPublisher sets up the change stream and automatically attempts to resume if it encounters a potentially recoverable error.
Prerequisites  The example below requires a restaurants collection in the test database.</description>
    </item>
    
    <item>
      <title>Change Streams</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/change-streams/</link>
      <pubDate>Tue, 15 Aug 2017 14:19:24 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/change-streams/</guid>
      <description>Change Streams MongoDB 3.6 introduces a new $changeStream aggregation pipeline operator.
Change streams provide a way to watch changes to documents in a collection. To improve the usability of this new stage, the MongoCollection API includes a new watch method. The ChangeStreamObservable sets up the change stream and automatically attempts to resume if it encounters a potentially recoverable error.
Prerequisites  The example below requires a restaurants collection in the test database.</description>
    </item>
    
    <item>
      <title>Change Streams</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/change-streams/</link>
      <pubDate>Tue, 15 Aug 2017 14:19:24 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/change-streams/</guid>
      <description>Change Streams MongoDB 3.6 introduces a new $changeStream aggregation pipeline operator.
Change streams provide a way to watch changes to documents in a collection. To improve the usability of this new stage, the MongoCollection API includes a new watch method. The ChangeStreamIterable sets up the change stream and automatically attempts to resume if it encounters a potentially recoverable error.
Prerequisites  The example below requires a restaurants collection in the test database.</description>
    </item>
    
    <item>
      <title>Compression</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/compression/</link>
      <pubDate>Fri, 16 Jun 2017 22:05:03 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/compression/</guid>
      <description>Compression The Java driver supports compression of messages to and from MongoDB servers. The driver implements the three algorithms that are supported by MongoDB servers:
 Snappy: Snappy compression can be used when connecting to MongoDB servers starting with the 3.4 release. Zlib: Zlib compression can be used when connecting to MongoDB servers starting with the 3.6 release. Zstandard: Zstandard compression can be used when connecting to MongoDB servers starting with the 4.</description>
    </item>
    
    <item>
      <title>Compression</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/compression/</link>
      <pubDate>Fri, 16 Jun 2017 22:05:03 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/compression/</guid>
      <description>Compression The Java driver supports compression of messages to and from MongoDB servers. The driver implements the three algorithms that are supported by MongoDB servers:
 Snappy: Snappy compression can be used when connecting to MongoDB servers starting with the 3.4 release. Zlib: Zlib compression can be used when connecting to MongoDB servers starting with the 3.6 release. Zstandard: Zstandard compression can be used when connecting to MongoDB servers starting with the 4.</description>
    </item>
    
    <item>
      <title>Compression</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/compression/</link>
      <pubDate>Fri, 16 Jun 2017 22:05:03 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/compression/</guid>
      <description>Compression The Java driver supports compression of messages to and from MongoDB servers. The driver implements the three algorithms that are supported by MongoDB servers:
 Snappy: Snappy compression can be used when connecting to MongoDB servers starting with the 3.4 release. Zlib: Zlib compression can be used when connecting to MongoDB servers starting with the 3.6 release. Zstandard: Zstandard compression can be used when connecting to MongoDB servers starting with the 4.</description>
    </item>
    
    <item>
      <title>Quick Start - Case Classes</title>
      <link>/mongo-java-driver/4.3/driver-scala/getting-started/quick-start-case-class/</link>
      <pubDate>Wed, 17 May 2017 15:36:57 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/getting-started/quick-start-case-class/</guid>
      <description>Quick Start with case classes The following code snippets come from the QuickTourCaseClass.scala example code that can be found with the driver source.
important This follows on from the quick tour.
See the Bson macros documentation for in-depth information about using macros for configuring case class support with your MongoCollection.
 First we&amp;rsquo;ll create the case class we want to use to represent the documents in the collection. In the following we create a Person case class and companion object:</description>
    </item>
    
    <item>
      <title>Quick Start - POJOs</title>
      <link>/mongo-java-driver/4.3/driver-reactive/getting-started/quick-start-pojo/</link>
      <pubDate>Wed, 17 May 2017 15:36:57 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/getting-started/quick-start-pojo/</guid>
      <description>MongoDB Reactive Streams Driver Quick Start - POJOs Note POJOs stands for Plain Old Java Objects.
The following code snippets come from the PojoQuickTour.java example code that can be found with the driver source on github.
 important This guide uses the Subscriber implementations as covered in the Quick Start Primer.
 Prerequisites  A running MongoDB on localhost using the default port for MongoDB 27017
 MongoDB Reactive Streams Driver.</description>
    </item>
    
    <item>
      <title>Quick Start - POJOs</title>
      <link>/mongo-java-driver/4.3/driver/getting-started/quick-start-pojo/</link>
      <pubDate>Wed, 17 May 2017 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/getting-started/quick-start-pojo/</guid>
      <description>MongoDB Driver Quick Start - POJOs Note POJOs stands for Plain Old Java Objects.
The following code snippets come from the PojoQuickTour.java example code that can be found with the driver source on github.
 Prerequisites  A running MongoDB on localhost using the default port for MongoDB 27017
 MongoDB Driver. See Installation for instructions on how to install the MongoDB driver.
 Quick Start. This guide follows on from the Quick Start.</description>
    </item>
    
    <item>
      <title>POJOs</title>
      <link>/mongo-java-driver/4.3/bson/pojos/</link>
      <pubDate>Mon, 10 Apr 2017 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/bson/pojos/</guid>
      <description>POJOs - Plain Old Java Objects The 3.5 release of the driver adds POJO support via the PojoCodecProvider, which allows for direct serialization of POJOs and Java Beans to and from BSON. Internally, the Codec for each POJO utilizes a ClassModel instance to store metadata about how the POJO should be serialized.
A ClassModel for a POJO includes:
 The class of the POJO. A new instance factory. Handling the creation of new instances of the POJO.</description>
    </item>
    
    <item>
      <title>Macros</title>
      <link>/mongo-java-driver/4.3/driver-scala/bson/macros/</link>
      <pubDate>Sun, 20 Nov 2016 14:14:00 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/bson/macros/</guid>
      <description>Macros New in 2.0, the Scala driver allows you to use case classes to represent documents in a collection via the Macros helper. Simple case classes and nested case classes are supported. Hierarchical modelling can be achieve by using a sealed trait or class and having case classes implement the parent trait.
Many simple Scala types are supported and they will be marshaled into their corresponding BsonValue type. Below is a list of Scala types and their type-safe BSON representation:</description>
    </item>
    
    <item>
      <title>GridFS</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/gridfs/</link>
      <pubDate>Sun, 12 Jun 2016 17:29:57 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/gridfs/</guid>
      <description>GridFS GridFS is a specification for storing and retrieving files that exceed the BSON document size limit of 16MB. Instead of storing a file in a single document, GridFS divides a file into parts, or chunks, and stores each of those chunks as a separate document.
When you query a GridFS store for a file, the Java driver will reassemble the chunks as needed.
The following code snippets come from the GridFSTour.</description>
    </item>
    
    <item>
      <title>GridFS</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/gridfs/</link>
      <pubDate>Sun, 12 Jun 2016 17:29:57 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/gridfs/</guid>
      <description>GridFS GridFS is a specification for storing and retrieving files that exceed the BSON document size limit of 16MB. Instead of storing a file in a single document, GridFS divides a file into parts, or chunks, and stores each of those chunks as a separate document.
When you query a GridFS store for a file, the Scala driver will reassemble the chunks as needed.
The following code snippets come from the GridFSTour.</description>
    </item>
    
    <item>
      <title>GridFS</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/gridfs/</link>
      <pubDate>Sun, 12 Jun 2016 17:29:57 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/gridfs/</guid>
      <description>GridFS GridFS is a specification for storing and retrieving files that exceed the BSON document size limit of 16MB. Instead of storing a file in a single document, GridFS divides a file into parts, or chunks, and stores each of those chunks as a separate document.
When you query a GridFS store for a file, the Java driver will reassemble the chunks as needed.
The following code snippets come from the GridFSTour.</description>
    </item>
    
    <item>
      <title>Geospatial Search</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/geospatial-search/</link>
      <pubDate>Sun, 12 Jun 2016 17:26:54 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/geospatial-search/</guid>
      <description>Geospatial Search To support geospatial queries, MongoDB provides various geospatial indexes as well as geospatial query operators.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import com.mongodb.reactivestreams.client.MongoClients; import com.mongodb.reactivestreams.client.MongoClient; import com.mongodb.reactivestreams.client.MongoCollection; import com.mongodb.reactivestreams.client.MongoDatabase; import com.mongodb.client.model.geojson.*; import com.mongodb.client.model.Indexes; import com.mongodb.client.model.Filters; import org.bson.Document;  important This guide uses the Subscriber implementations as covered in the Quick Start Primer.</description>
    </item>
    
    <item>
      <title>Geospatial Search</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/geospatial-search/</link>
      <pubDate>Sun, 12 Jun 2016 17:26:54 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/geospatial-search/</guid>
      <description>Geospatial Search To support geospatial queries, MongoDB provides various geospatial indexes as well as geospatial query operators.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import org.mongodb.scala._ import org.mongodb.scala.model.geojson._ import org.mongodb.scala.model.Indexes import org.mongodb.scala.model.Filters  important This guide uses the Observable implicits as covered in the Quick Start Primer.</description>
    </item>
    
    <item>
      <title>Geospatial Search</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/geospatial-search/</link>
      <pubDate>Sun, 12 Jun 2016 17:26:54 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/geospatial-search/</guid>
      <description>Geospatial Search To support geospatial queries, MongoDB provides various geospatial indexes as well as geospatial query operators.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import com.mongodb.client.MongoClients; import com.mongodb.client.MongoClient; import com.mongodb.client.MongoCollection; import com.mongodb.client.MongoDatabase; import com.mongodb.client.MongoCursor; import com.mongodb.client.model.geojson.*; import com.mongodb.client.model.Indexes; import com.mongodb.client.model.Filters; import org.bson.Document;   Connect to a MongoDB Deployment Connect to a MongoDB deployment and declare and define a MongoDatabase instance.</description>
    </item>
    
    <item>
      <title>Read Operations</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/perform-read-operations/</link>
      <pubDate>Thu, 09 Jun 2016 13:21:16 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/perform-read-operations/</guid>
      <description>Find Operations Find operations retrieve documents from a collection. You can specify a filter to select only those documents that match the filter condition.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import com.mongodb.*; import com.mongodb.reactivestreams.client.MongoClients; import com.mongodb.reactivestreams.client.MongoClient; import com.mongodb.reactivestreams.client.MongoCollection; import com.mongodb.reactivestreams.client.MongoDatabase; import com.mongodb.client.model.Projections; import com.mongodb.client.model.Filters; import com.</description>
    </item>
    
    <item>
      <title>Read Operations</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/perform-read-operations/</link>
      <pubDate>Thu, 09 Jun 2016 13:21:16 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/perform-read-operations/</guid>
      <description>Find Operations Find operations retrieve documents from a collection. You can specify a filter to select only those documents that match the filter condition.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import org.mongodb.scala._ import org.mongodb.scala.model.Filters._ import org.mongodb.scala.model.Projections._ import org.mongodb.scala.model.Sorts._   important This guide uses the Observable implicits as covered in the Quick Start Primer.</description>
    </item>
    
    <item>
      <title>Read Operations</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/perform-read-operations/</link>
      <pubDate>Thu, 09 Jun 2016 13:21:16 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/perform-read-operations/</guid>
      <description>Find Operations Find operations retrieve documents from a collection. You can specify a filter to select only those documents that match the filter condition.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import com.mongodb.*; import com.mongodb.client.MongoClients; import com.mongodb.client.MongoClient; import com.mongodb.client.MongoCollection; import com.mongodb.client.MongoDatabase; import com.mongodb.client.FindIterable; import com.mongodb.client.model.Projections; import com.</description>
    </item>
    
    <item>
      <title>Write Operations</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/perform-write-operations/</link>
      <pubDate>Thu, 09 Jun 2016 13:21:16 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/perform-write-operations/</guid>
      <description>Write Operations (Insert, Update, Replace, Delete) Perform write operations to insert new documents into a collection, update existing document or documents in a collection, replace an existing document in a collection, or delete existing document or documents from a collection.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:</description>
    </item>
    
    <item>
      <title>Write Operations</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/perform-write-operations/</link>
      <pubDate>Thu, 09 Jun 2016 13:21:16 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/perform-write-operations/</guid>
      <description>Write Operations (Insert, Update, Replace, Delete) Perform write operations to insert new documents into a collection, update existing document or documents in a collection, replace an existing document in a collection, or delete existing document or documents from a collection.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:</description>
    </item>
    
    <item>
      <title>Write Operations</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/perform-write-operations/</link>
      <pubDate>Thu, 09 Jun 2016 13:21:16 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/perform-write-operations/</guid>
      <description>Write Operations (Insert, Update, Replace, Delete) Perform write operations to insert new documents into a collection, update existing document or documents in a collection, replace an existing document in a collection, or delete existing document or documents from a collection.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:</description>
    </item>
    
    <item>
      <title>What&#39;s New</title>
      <link>/mongo-java-driver/4.3/whats-new/</link>
      <pubDate>Thu, 09 Jun 2016 12:47:43 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/whats-new/</guid>
      <description>What&amp;rsquo;s new in 4.3 This release fully supports all MongoDB releases from versions 2.6 to 4.4. It also supports some features of the next release of MongoDB.
New features of the 4.3 Java driver release include:
 Added support for the MongoDB Versioned API. See the ServerApi API documentation for details. Removed most restrictions on allowed characters in field names of documents being inserted or replaced. This is a behavioral change for any application that is relying on client-side enforcement of these restrictions.</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/aggregation/</link>
      <pubDate>Wed, 08 Jun 2016 14:19:24 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/aggregation/</guid>
      <description>Aggregation Framework The aggregation pipeline is a framework for data aggregation, modeled on the concept of data processing pipelines.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import com.mongodb.reactivestreams.client.MongoClients; import com.mongodb.reactivestreams.client.MongoClient; import com.mongodb.reactivestreams.client.MongoCollection; import com.mongodb.reactivestreams.client.MongoDatabase; import com.mongodb.client.model.Aggregates; import com.mongodb.client.model.Accumulators; import com.mongodb.client.model.Projections; import com.mongodb.client.model.Filters; import org.bson.Document;   important This guide uses the Subscriber implementations as covered in the Quick Start Primer.</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/aggregation/</link>
      <pubDate>Wed, 08 Jun 2016 14:19:24 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/aggregation/</guid>
      <description>Aggregation Framework The aggregation pipeline is a framework for data aggregation, modeled on the concept of data processing pipelines.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import org.mongodb.scala._ import org.mongodb.scala.model.Aggregates._ import org.mongodb.scala.model.Accumulators._ import org.mongodb.scala.model.Filters._ import org.mongodb.scala.model.Projections._   important This guide uses the Observable implicits as covered in the Quick Start Primer.</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/aggregation/</link>
      <pubDate>Wed, 08 Jun 2016 14:19:24 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/aggregation/</guid>
      <description>Aggregation Framework The aggregation pipeline is a framework for data aggregation, modeled on the concept of data processing pipelines.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import com.mongodb.client.MongoClients; import com.mongodb.client.MongoClient; import com.mongodb.client.MongoCollection; import com.mongodb.client.MongoDatabase; import com.mongodb.client.model.Aggregates; import com.mongodb.client.model.Accumulators; import com.mongodb.client.model.Projections; import com.mongodb.client.model.Filters; import org.bson.Document;   Connect to a MongoDB Deployment Connect to a MongoDB deployment and declare and define a MongoDatabase and a MongoCollection instances.</description>
    </item>
    
    <item>
      <title>Text Search</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/text-search/</link>
      <pubDate>Tue, 07 Jun 2016 23:28:50 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/text-search/</guid>
      <description>Text Search MongoDB supports query operations that perform a text search of string content. To perform text search, MongoDB uses a text index and the $text query operator.
The Java driver provides the Filters.text() helper to facilitate the creation of text search query filters.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:</description>
    </item>
    
    <item>
      <title>Text Search</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/text-search/</link>
      <pubDate>Tue, 07 Jun 2016 23:28:50 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/text-search/</guid>
      <description>Text Search MongoDB supports query operations that perform a text search of string content. To perform text search, MongoDB uses a text index and the $text query operator.
The Scala driver provides the Filters.text() helper to facilitate the creation of text search query filters.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:</description>
    </item>
    
    <item>
      <title>Text Search</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/text-search/</link>
      <pubDate>Tue, 07 Jun 2016 23:28:50 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/text-search/</guid>
      <description>Text Search Atlas Search makes it easy to build fast, relevance-based search capabilities on top of your MongoDB data. Try it today on MongoDB Atlas, our fully managed database as a service.
Alternatively, MongoDB supports simpler query operations that perform a text search of string content. To perform text search, MongoDB uses a text index and the $text query operator.
The Java driver provides the Filters.text() helper to facilitate the creation of text search query filters.</description>
    </item>
    
    <item>
      <title>Databases and Collections</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/databases-collections/</link>
      <pubDate>Tue, 31 May 2016 13:40:45 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/databases-collections/</guid>
      <description>Databases and Collections MongoDB stores documents in collections; the collections in databases.
Prerequisites  Include following import statements:
import com.mongodb.reactivestreams.client.MongoClients; import com.mongodb.reactivestreams.client.MongoClient; import com.mongodb.reactivestreams.client.MongoCollection; import com.mongodb.reactivestreams.client.MongoDatabase; import static com.mongodb.client.model.Filters.*; import com.mongodb.client.model.CreateCollectionOptions; import com.mongodb.client.model.ValidationOptions;   important This guide uses the Subscriber implementations as covered in the Quick Start Primer.
 Connect to a MongoDB Deployment Connect to a running MongoDB deployment.
For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port 27017.</description>
    </item>
    
    <item>
      <title>Databases and Collections</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/databases-collections/</link>
      <pubDate>Tue, 31 May 2016 13:40:45 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/databases-collections/</guid>
      <description>Databases and Collections MongoDB stores documents in collections; the collections in databases.
Prerequisites  Include following import statements:
import org.mongodb.scala._ import org.mongodb.scala.model.Filters._   important This guide uses the Observable implicits as covered in the Quick Start Primer.
 Connect to a MongoDB Deployment Connect to a running MongoDB deployment.
For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port 27017.</description>
    </item>
    
    <item>
      <title>Databases and Collections</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/databases-collections/</link>
      <pubDate>Tue, 31 May 2016 13:40:45 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/databases-collections/</guid>
      <description>Databases and Collections MongoDB stores documents in collections; the collections in databases.
Prerequisites  Include following import statements:
import com.mongodb.client.MongoClients; import com.mongodb.client.MongoClient; import com.mongodb.client.MongoCollection; import com.mongodb.client.MongoDatabase; import static com.mongodb.client.model.Filters.*; import com.mongodb.client.model.CreateCollectionOptions; import com.mongodb.client.model.ValidationOptions;   Connect to a MongoDB Deployment Connect to a running MongoDB deployment.
For example, include the following code to connect to a standalone MongoDB deployment running on localhost on port 27017.
MongoClient mongoClient = MongoClients.create();  For more information on connecting to running MongoDB deployments, see Connect to MongoDB.</description>
    </item>
    
    <item>
      <title>Run Commands</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/commands/</link>
      <pubDate>Tue, 31 May 2016 13:07:04 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/commands/</guid>
      <description>Run Commands Not all commands have a specific helper. However you can run any MongoDB command by using the MongoDatabase&amp;rsquo;s runCommand() method.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import com.mongodb.reactivestreams.client.MongoClients; import com.mongodb.reactivestreams.client.MongoClient; import com.mongodb.reactivestreams.client.MongoDatabase; import org.bson.Document;   important This guide uses the Subscriber implementations as covered in the Quick Start Primer.</description>
    </item>
    
    <item>
      <title>Run Commands</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/commands/</link>
      <pubDate>Tue, 31 May 2016 13:07:04 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/commands/</guid>
      <description>Run Commands Not all commands have a specific helper. However you can run any MongoDB command by using the MongoDatabase&amp;rsquo;s runCommand() method.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import org.mongodb.scala._   important This guide uses the Observable implicits as covered in the Quick Start Primer.</description>
    </item>
    
    <item>
      <title>Run Commands</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/commands/</link>
      <pubDate>Tue, 31 May 2016 13:07:04 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/commands/</guid>
      <description>Run Commands Not all commands have a specific helper. However you can run any MongoDB command by using the MongoDatabase&amp;rsquo;s runCommand() method.
Prerequisites  The example below requires a restaurants collection in the test database. To create and populate the collection, follow the directions in github.
 Include the following import statements:
import com.mongodb.client.MongoClients; import com.mongodb.client.MongoClient; import com.mongodb.client.MongoDatabase; import org.bson.Document;   Connect to a MongoDB Deployment Connect to a MongoDB deployment and declare and define a MongoDatabase instance.</description>
    </item>
    
    <item>
      <title>Create Indexes</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/indexes/</link>
      <pubDate>Tue, 31 May 2016 10:10:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/indexes/</guid>
      <description>Create Indexes Indexes support the efficient execution of queries in MongoDB. To create an index on a field or fields, pass an index specification document to the MongoCollection.createIndex() method.
The MongoDB Java Driver provides the Indexes class that includes static factory methods to create index specification documents for the various MongoDB Index key types.
Note MongoDB only creates an index if an index of the same specification does not already exist.</description>
    </item>
    
    <item>
      <title>Create Indexes</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/indexes/</link>
      <pubDate>Tue, 31 May 2016 10:10:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/indexes/</guid>
      <description>Create Indexes Indexes support the efficient execution of queries in MongoDB. To create an index on a field or fields, pass an index specification document to the MongoCollection.createIndex() method.
The MongoDB Scala Driver provides the Indexes class that includes helper methods to create index specification documents for the various MongoDB Index key types.
Note MongoDB only creates an index if an index of the same specification does not already exist.</description>
    </item>
    
    <item>
      <title>Create Indexes</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/indexes/</link>
      <pubDate>Tue, 31 May 2016 10:10:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/indexes/</guid>
      <description>Create Indexes Indexes support the efficient execution of queries in MongoDB. To create an index on a field or fields, pass an index specification document to the MongoCollection.createIndex() method.
The MongoDB Java Driver provides the Indexes class that includes static factory methods to create index specification documents for the various MongoDB Index key types.
Note MongoDB only creates an index if an index of the same specification does not already exist.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/authentication/</link>
      <pubDate>Sun, 29 May 2016 23:27:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/authentication/</guid>
      <description>Authentication The Java driver supports all MongoDB authentication mechanisms, including those only available in the MongoDB Enterprise Edition.
MongoCredential import com.mongodb.MongoCredential; import com.mongodb.ConnectionString; import com.mongodb.reactivestreams.client.MongoClients; import com.mongodb.reactivestreams.client.MongoClient;  An authentication credential is represented as an instance of the MongoCredential class. The MongoCredential class includes static factory methods for each of the supported authentication mechanisms.
Default Authentication Mechanism In MongoDB 3.0, MongoDB changed the default authentication mechanism from MONGODB-CR to SCRAM-SHA-1.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/authentication/</link>
      <pubDate>Sun, 29 May 2016 23:27:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/authentication/</guid>
      <description>Authentication The Java driver supports all MongoDB authentication mechanisms, including those only available in the MongoDB Enterprise Edition.
MongoCredential import org.mongodb.scala._ import scala.collection.JavaConverters._  An authentication credential is represented as an instance of the MongoCredential class. The MongoCredential class includes static helper methods for each of the supported authentication mechanisms.
Default Authentication Mechanism In MongoDB 3.0, MongoDB changed the default authentication mechanism from MONGODB-CR to SCRAM-SHA-1. In MongoDB 4.0 support for the deprecated MONGODB-CR mechanism was removed and SCRAM-SHA-256 support was added.</description>
    </item>
    
    <item>
      <title>Authentication</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/authentication/</link>
      <pubDate>Sun, 29 May 2016 23:27:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/authentication/</guid>
      <description>Authentication The Java driver supports all MongoDB authentication mechanisms, including those only available in the MongoDB Enterprise Edition.
MongoCredential import com.mongodb.MongoCredential;  New MongoClient API (since 3.7):
import com.mongodb.ConnectionString; import com.mongodb.client.MongoClients; import com.mongodb.client.MongoClient;  Legacy MongoClient API:
import com.mongodb.MongoClient; import com.mongodb.ConnectionString;  An authentication credential is represented as an instance of the MongoCredential class. The MongoCredential class includes static factory methods for each of the supported authentication mechanisms.
You can also use a ConnectionString and pass it to a MongoClient() constructor that takes a ConnectionString parameter.</description>
    </item>
    
    <item>
      <title>TLS/SSL</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/ssl/</link>
      <pubDate>Sun, 29 May 2016 22:05:03 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/ssl/</guid>
      <description>TLS/SSL The Java driver supports TLS/SSL connections to MongoDB servers using the underlying support for TLS/SSL provided by the JDK. You can configure the driver to use TLS/SSL either with ConnectionString or with MongoClientSettings.
MongoClient API (since 3.7) Specify TLS/SSL via ConnectionString com.mongodb.reactivestreams.client.MongoClients; com.mongodb.reactivestreams.client.MongoClient;  To specify TLS/SSL with ConnectionString, specify ssl=true as part of the connection string, as in:
MongoClient mongoClient = MongoClients.create(&amp;quot;mongodb://localhost/?ssl=true&amp;quot;);  Specify TLS/SSL via MongoClientSettings import com.</description>
    </item>
    
    <item>
      <title>TLS/SSL</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/ssl/</link>
      <pubDate>Sun, 29 May 2016 22:05:03 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/ssl/</guid>
      <description>TLS/SSL The Java driver supports TLS/SSL connections to MongoDB servers using the underlying support for TLS/SSL provided by the JDK. You can configure the driver to use TLS/SSL either with ConnectionString or with MongoClientSettings.
MongoClient API (since 3.7) Specify TLS/SSL via ConnectionString import org.mongodb.scala._  To specify TLS/SSL with ConnectionString, specify ssl=true as part of the connection string, as in:
val mongoClient: MongoClient = MongoClient(&amp;quot;mongodb://localhost/?ssl=true&amp;quot;)  Specify TLS/SSL via MongoClientSettings To specify TLS/SSL with with MongoClientSettings, set the enabled property to true, as in:</description>
    </item>
    
    <item>
      <title>TLS/SSL</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/ssl/</link>
      <pubDate>Sun, 29 May 2016 22:05:03 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/ssl/</guid>
      <description>TLS/SSL The Java driver supports TLS/SSL connections to MongoDB servers using the underlying support for TLS/SSL provided by the JDK. You can configure the driver to use TLS/SSL either with ConnectionString or with MongoClientSettings.
MongoClient API (since 3.7) Specify TLS/SSL via ConnectionString com.mongodb.client.MongoClients; com.mongodb.client.MongoClient;  To specify TLS/SSL with ConnectionString, specify ssl=true as part of the connection string, as in:
MongoClient mongoClient = MongoClients.create(&amp;quot;mongodb://localhost/?ssl=true&amp;quot;);  Specify TLS/SSL via MongoClientSettings import com.</description>
    </item>
    
    <item>
      <title>Connect to MongoDB</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/connect-to-mongodb/</link>
      <pubDate>Sun, 29 May 2016 13:26:13 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/connect-to-mongodb/</guid>
      <description>Connect to MongoDB Use MongoClients.create() to make a connection to a running MongoDB instance.
important The following examples are not meant to provide an exhaustive list of ways to instantiate MongoClient. For a complete list of MongoClients factory methods, see the MongoClients API documentation.
 Note It is strongly recommended that system keep-alive settings should be configured with shorter timeouts.
See the &amp;lsquo;does TCP keep-alive time affect MongoDB deployments?&amp;rsquo; documentation for more information.</description>
    </item>
    
    <item>
      <title>Connect to MongoDB</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/connect-to-mongodb/</link>
      <pubDate>Sun, 29 May 2016 13:26:13 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/connect-to-mongodb/</guid>
      <description>Connect to MongoDB Use MongoClient() to make a connection to a running MongoDB instance.
important The following examples are not meant to provide an exhaustive list of ways to instantiate MongoClient. For a complete list of MongoClient companion methods, see the MongoClient API documentation.
 Note It is strongly recommended that system keep-alive settings should be configured with shorter timeouts.
See the &amp;lsquo;does TCP keep-alive time affect MongoDB deployments?&amp;rsquo; documentation for more information.</description>
    </item>
    
    <item>
      <title>Connect to MongoDB</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/connect-to-mongodb/</link>
      <pubDate>Sun, 29 May 2016 13:26:13 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/connect-to-mongodb/</guid>
      <description>Connect to MongoDB Use MongoClients.create() (as of the 3.7 release), or MongoClient() for the legacy MongoClient API, to make a connection to a running MongoDB instance.
important The following examples are not meant to provide an exhaustive list of ways to instantiate MongoClient. For a complete list of MongoClients factory methods, see the MongoClients API documentation, or for the legacy MongoClient API see the MongoClient() API documentation.
 Note The 3.</description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/</link>
      <pubDate>Sun, 29 May 2016 12:49:33 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/</guid>
      <description> MongoDB Reactive Streams Driver Tutorials The tutorials in this section provide examples of some frequently used operations. This section is not meant to be an exhaustive list of all operations available in the Java driver.
 Connect to MongoDB
 Databases and Collections
 Create Indexes
 Perform Read Operations
 Perform Write Operations
 Aggregation
 Text Search
 Geospatial Search
 GridFS
 Run Commands
  </description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/</link>
      <pubDate>Sun, 29 May 2016 12:49:33 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/</guid>
      <description> MongoDB Scala Driver Tutorials The tutorials in this section provide examples of some frequently used operations. This section is not meant to be an exhaustive list of all operations available in the Scala driver.
 Connect to MongoDB
 Databases and Collections
 Create Indexes
 Perform Read Operations
 Perform Write Operations
 Aggregation
 Text Search
 Geospatial Search
 GridFS
 Run Commands
  </description>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/</link>
      <pubDate>Sun, 29 May 2016 12:49:33 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/</guid>
      <description> Java Driver Tutorials The tutorials in this section provide examples of some frequently used operations. This section is not meant to be an exhaustive list of all operations available in the Java driver.
 Connect to MongoDB
 Databases and Collections
 Create Indexes
 Perform Read Operations
 Perform Write Operations
 Aggregation
 Text Search
 Geospatial Search
 GridFS
 Run Commands
  </description>
    </item>
    
    <item>
      <title>Bulk Writes</title>
      <link>/mongo-java-driver/4.3/driver-reactive/tutorials/bulk-writes/</link>
      <pubDate>Sun, 29 May 2016 12:47:54 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/tutorials/bulk-writes/</guid>
      <description>Bulk operations Starting in version 2.6, MongoDB servers support bulk write commands for insert, update, and delete in a way that allows the driver to implement the correct semantics for BulkWriteResult and BulkWriteException.
There are two types of bulk operations, ordered and unordered bulk operations.
 Ordered bulk operations execute all the operation in order and error out on the first write error.
 Unordered bulk operations execute all the operations and report any the errors.</description>
    </item>
    
    <item>
      <title>Bulk Writes</title>
      <link>/mongo-java-driver/4.3/driver-scala/tutorials/bulk-writes/</link>
      <pubDate>Sun, 29 May 2016 12:47:54 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/tutorials/bulk-writes/</guid>
      <description>Bulk operations Starting in version 2.6, MongoDB servers support bulk write commands for insert, update, and delete in a way that allows the driver to implement the correct semantics for BulkWriteResult and BulkWriteException.
There are two types of bulk operations, ordered and unordered bulk operations.
 Ordered bulk operations execute all the operation in order and error out on the first write error.
 Unordered bulk operations execute all the operations and report any the errors.</description>
    </item>
    
    <item>
      <title>Bulk Writes</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/bulk-writes/</link>
      <pubDate>Sun, 29 May 2016 12:47:54 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/bulk-writes/</guid>
      <description>Bulk operations Starting in version 2.6, MongoDB servers support bulk write commands for insert, update, and delete in a way that allows the driver to implement the correct semantics for BulkWriteResult and BulkWriteException.
There are two types of bulk operations, ordered and unordered bulk operations.
 Ordered bulk operations execute all the operation in order and error out on the first write error.
 Unordered bulk operations execute all the operations and report any the errors.</description>
    </item>
    
    <item>
      <title>Indexes</title>
      <link>/mongo-java-driver/4.3/builders/indexes/</link>
      <pubDate>Thu, 16 Jul 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/builders/indexes/</guid>
      <description>Indexes The Indexes class provides static factory methods for all the MongoDB Index key types.
Each method returns an instance of the Bson type, which can in turn be used with the createIndex methods.
For brevity, you may choose to import the methods of the Indexes class statically:
import static com.mongodb.client.model.Indexes.*;  All the examples below assume this static import.
Ascending To specify an ascending index key, use one of the ascending methods.</description>
    </item>
    
    <item>
      <title>Indexes</title>
      <link>/mongo-java-driver/4.3/driver-scala/builders/indexes/</link>
      <pubDate>Thu, 16 Jul 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/builders/indexes/</guid>
      <description>Indexes The Indexes class provides static factory methods for all the MongoDB Index key types.
Each method returns an instance of the Bson type, which can in turn be used with the createIndex methods.
For brevity, you may choose to import the methods of the Indexes class statically:
import org.mongodb.scala.model.Indexes._  All the examples below assume this static import.
Ascending To specify an ascending index key, use one of the ascending methods.</description>
    </item>
    
    <item>
      <title>Observables</title>
      <link>/mongo-java-driver/4.3/driver-scala/reference/observables/</link>
      <pubDate>Thu, 14 May 2015 08:01:00 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/reference/observables/</guid>
      <description>Observables The MongoDB Scala Driver is an asynchronous and non blocking driver. Using the Observable model asynchronous events become simple, composable operations, freed from the complexity of nested callbacks.
For asynchronous operations there are three interfaces Observable, Subscription and Observer.
Note The MongoDB Scala driver is now built upon the MongoDB Reactive Streams driver and is an implementation of the reactive streams specification. Observables are implementations of Publishers and Observers are implementations of Subscribers.</description>
    </item>
    
    <item>
      <title>Aggregates</title>
      <link>/mongo-java-driver/4.3/builders/aggregation/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/builders/aggregation/</guid>
      <description>Aggregates The Aggregates class provides static factory methods that build aggregation pipeline operators. Each method returns an instance of the Bson type, which can in turn be passed to the aggregate method of MongoCollection.
For brevity, you may choose to import the methods of the Aggregates class statically:
import static com.mongodb.client.model.Aggregates.*;  All the examples below assume this static import.
Match The $match pipeline stage passes all documents matching the specified filter to the next stage.</description>
    </item>
    
    <item>
      <title>Aggregation</title>
      <link>/mongo-java-driver/4.3/driver-scala/builders/aggregation/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/builders/aggregation/</guid>
      <description>Aggregation The Aggregates class provides static factory methods that build aggregation pipeline operators. Each method returns an instance of the Bson type, which can in turn be passed to the aggregate method of MongoCollection.
For brevity, you may choose to import the methods of the Aggregates class statically:
import org.mongodb.scala.model.Aggregates._  All the examples below assume this static import.
Match The $match pipeline stage passes all documents matching the specified filter to the next stage.</description>
    </item>
    
    <item>
      <title>Codec and CodecRegistry</title>
      <link>/mongo-java-driver/4.3/bson/codecs/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/bson/codecs/</guid>
      <description>Codec and CodecRegistry In the last section we saw how to use the BsonReader and BsonWriter API to read and write BSON documents. But writing code at that low a level is tedious and error-prone, so in practice these algorithms are packaged in implementations of the Codec interface.
Codec The Codec interface abstracts the processes of decoding a BSON value into a Java object using a BsonReader and encoding a Java object into a BSON value using a BsonWriter.</description>
    </item>
    
    <item>
      <title>Documents</title>
      <link>/mongo-java-driver/4.3/bson/documents/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/bson/documents/</guid>
      <description>Documents The driver includes several classes and interfaces used for representing BSON documents.
important The server&amp;rsquo;s behavior related to duplicate key names in a document is undefined. When a document with duplicate key names is decoded, the driver will assign the last value associated with the duplicate key. Storing such a document will cause the other values to be lost.
 BsonDocument Although generally not needed by users of the high-level driver API, the BsonDocument class is central to the way that documents are managed internally by the driver.</description>
    </item>
    
    <item>
      <title>Documents</title>
      <link>/mongo-java-driver/4.3/driver-scala/bson/scala-documents/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/bson/scala-documents/</guid>
      <description>Documents The scala driver includes two scala specific representations for BSON documents. Following convention from the scala collections library, there are immutable and mutable implementations of documents. The underlying implementations of the scala Document use the type safe BsonDocument class. The scala bson classes are available from the org.mongodb.scala.bson namespace, which includes type aliases and companion objects. In general this should suffice but for advanced use cases you may need to use org.</description>
    </item>
    
    <item>
      <title>Extended JSON</title>
      <link>/mongo-java-driver/4.3/bson/extended-json/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/bson/extended-json/</guid>
      <description>JSON As discussed earlier, the Java driver supports reading and writing BSON documents represented as JSON values. The driver supports four standard variants:
 Extended Mode: Canonical representation that avoids any loss of BSON type information. See the Extended JSON specification for a description of this mode. Relaxed Mode: Relaxed representation that loses type information for BSON numeric types and uses a more human-readable representation of BSON dates. See the Extended JSON specification for a description of this mode.</description>
    </item>
    
    <item>
      <title>Extended JSON</title>
      <link>/mongo-java-driver/4.3/driver-scala/bson/scala-extended-json/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/bson/scala-extended-json/</guid>
      <description>MongoDB Extended JSON The Scala driver supports reading and writing BSON documents represented as
MongoDB Extended JSON. Both variants are supported:
 Strict Mode: representations of BSON types that conform to the JSON RFC. This is the format that mongoexport produces and mongoimport consumes. Shell Mode: a superset of JSON that the MongoDB shell can parse.  Furthermore, the Document provides two sets of convenience methods for this purpose:</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>/mongo-java-driver/4.3/builders/filters/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/builders/filters/</guid>
      <description>Filters The Filters class provides static factory methods for all the MongoDB query operators. Each method returns an instance of the Bson type, which can in turn be passed to any method that expects a query filter.
For brevity, you may choose to import the methods of the Filters class statically:
import static com.mongodb.client.model.Filters.*;  All the examples below assume this static import.
Comparison The comparison operator methods include:</description>
    </item>
    
    <item>
      <title>Filters</title>
      <link>/mongo-java-driver/4.3/driver-scala/builders/filters/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/builders/filters/</guid>
      <description>Filters The Filters class provides static factory methods for all the MongoDB query operators. Each method returns an instance of the Bson type, which can in turn be passed to any method that expects a query filter.
For brevity, you may choose to import the methods of the Filters class statically:
import org.mongodb.scala.model.Filters._  All the examples below assume this static import.
Comparison The comparison operator methods include:
 eq: Matches values that are equal to a specified value.</description>
    </item>
    
    <item>
      <title>Projections</title>
      <link>/mongo-java-driver/4.3/builders/projections/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/builders/projections/</guid>
      <description>Projections The Projections class provides static factory methods for all the MongoDB projection operators. Each method returns an instance of the Bson type, which can in turn be passed to any method that expects a projection.
For brevity, you may choose to import the methods of the Projections class statically:
import static com.mongodb.client.model.Projections.*;  All the examples below assume this static import.
Inclusion By default, all fields of each document are projected.</description>
    </item>
    
    <item>
      <title>Projections</title>
      <link>/mongo-java-driver/4.3/driver-scala/builders/projections/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/builders/projections/</guid>
      <description>Projections The Projections class provides static factory methods for all the MongoDB projection operators. Each method returns an instance of the Bson type, which can in turn be passed to any method that expects a projection.
For brevity, you may choose to import the methods of the Projections class statically:
import org.mongodb.scala.model.Projections._  All the examples below assume this static import.
Inclusion By default, all fields of each document are projected.</description>
    </item>
    
    <item>
      <title>Readers and Writers</title>
      <link>/mongo-java-driver/4.3/bson/readers-and-writers/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/bson/readers-and-writers/</guid>
      <description>BsonWriter and BsonReader The various implementations of the Bson interface discussed in the previous section all represent BSON documents using an underlying Java Map instance. However, they are not directly responsible for reading and writing their representations from and to BSON. Instead, this process is delegated to BsonWriter and BsonReader, interfaces that expose methods for iterative, stream-based processing of BSON documents.
BsonWriter The BsonWriter class exposes methods for writing a BSON document.</description>
    </item>
    
    <item>
      <title>Sort Criteria</title>
      <link>/mongo-java-driver/4.3/driver-scala/builders/sorts/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/builders/sorts/</guid>
      <description>Sorts The Sorts class provides static factory methods for all the MongoDB sort criteria operators. Each method returns an instance of the Bson type, which can in turn be passed to any method that expects sort criteria.
For brevity, you may choose to import the methods of the Sorts class statically:
import org.mongodb.scala.model.Sorts._  All the examples below assume this static import.
Ascending To specify an ascending sort, use one of the ascending methods.</description>
    </item>
    
    <item>
      <title>Sort Criteria  </title>
      <link>/mongo-java-driver/4.3/builders/sorts/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/builders/sorts/</guid>
      <description>Sorts The Sorts class provides static factory methods for all the MongoDB sort criteria operators. Each method returns an instance of the Bson type, which can in turn be passed to any method that expects sort criteria.
For brevity, you may choose to import the methods of the Sorts class statically:
import static com.mongodb.client.model.Sorts.*;  All the examples below assume this static import.
Ascending To specify an ascending sort, use one of the ascending methods.</description>
    </item>
    
    <item>
      <title>Updates</title>
      <link>/mongo-java-driver/4.3/builders/updates/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/builders/updates/</guid>
      <description>Updates The Updates class provides static factory methods for all the MongoDB update operators. Each method returns an instance of the Bson type, which can in turn be passed to any method that expects an update.
For brevity, you may choose to import the methods of the Updates class statically:
import static com.mongodb.client.model.Updates.*;  All the examples below assume this static import.
Field Updates This section describes update operators that apply to the value of an entire field.</description>
    </item>
    
    <item>
      <title>Updates</title>
      <link>/mongo-java-driver/4.3/driver-scala/builders/updates/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/builders/updates/</guid>
      <description>Updates The Updates class provides static factory methods for all the MongoDB update operators. Each method returns an instance of the Bson type, which can in turn be passed to any method that expects an update.
For brevity, you may choose to import the methods of the Updates class statically:
import org.mongodb.scala.model.Updates._  All the examples below assume this static import.
Field Updates This section describes update operators that apply to the value of an entire field.</description>
    </item>
    
    <item>
      <title>Upgrade Considerations</title>
      <link>/mongo-java-driver/4.3/upgrading/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:39 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/upgrading/</guid>
      <description>Upgrading to the 4.3 Driver The 4.3 release is a minor release as per the definition of semantic versioning. As such, there are no breaking changes in this release for users upgrading from the 4.2 release.
Upgrading to the 4.2 Driver The 4.2 release is a minor release as per the definition of semantic versioning. As such, there are no breaking changes in this release for users upgrading from the 4.</description>
    </item>
    
    <item>
      <title>BSON</title>
      <link>/mongo-java-driver/4.3/bson/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/bson/</guid>
      <description>BSON The BSON library comprehensively supports BSON, the data storage and network transfer format that MongoDB uses for “documents&amp;rdquo;. BSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents.
 Documents: Documentation of the driver&amp;rsquo;s support for BSON document representations Readers and Writers: Documentation of the driver&amp;rsquo;s support for stream-based reading and writing of BSON documents JSON: Documentation of the driver&amp;rsquo;s support for JSON Codec and CodecRegistry: Documentation of the driver&amp;rsquo;s Codec API, an abstraction for producing and consuming BSON document representations using the stream-based readers and writers POJOs: Documentation of the driver&amp;rsquo;s POJO support.</description>
    </item>
    
    <item>
      <title>BSON</title>
      <link>/mongo-java-driver/4.3/driver-scala/bson/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/bson/</guid>
      <description>BSON The BSON library comprehensively supports BSON, the data storage and network transfer format that MongoDB uses for “documents&amp;rdquo;. BSON, short for Binary JSON, is a binary-encoded serialization of JSON-like documents.
For everyday usage there are type aliases and companion objects available from the org.mongodb.scala.bson package.
 Documents: Documentation of the driver&amp;rsquo;s support for BSON document representations Extended JSON: Documentation of the driver&amp;rsquo;s support for MongoDB Extended JSON  For advanced usage you may need to use org.</description>
    </item>
    
    <item>
      <title>Builders</title>
      <link>/mongo-java-driver/4.3/builders/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/builders/</guid>
      <description> Builders The driver provides several classes that make it easier to use the CRUD API.
 Filters: Documentation of the driver&amp;rsquo;s support for building query filters Projections: Documentation of the driver&amp;rsquo;s support for building projections Sorts: Documentation of the driver&amp;rsquo;s support for building sort criteria Aggregation: Documentation of the driver&amp;rsquo;s support for building aggregation pipelines Updates: Documentation of the driver&amp;rsquo;s support for building updates Indexes: Documentation of the driver&amp;rsquo;s support for creating index keys  </description>
    </item>
    
    <item>
      <title>Builders</title>
      <link>/mongo-java-driver/4.3/driver-scala/builders/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/builders/</guid>
      <description>Builders The driver provides several classes that make it easier to use the CRUD API.
 Filters: Documentation of the driver&amp;rsquo;s support for building query filters Projections: Documentation of the driver&amp;rsquo;s support for building projections Sorts: Documentation of the driver&amp;rsquo;s support for building sort criteria Aggregation: Documentation of the driver&amp;rsquo;s support for building aggregation pipelines Updates: Documentation of the driver&amp;rsquo;s support for building updates Indexes: Documentation of the driver&amp;rsquo;s support for creating index keys  important Builders make use of the Bson helper which unlike the Document is not type safe.</description>
    </item>
    
    <item>
      <title>JNDI</title>
      <link>/mongo-java-driver/4.3/driver/tutorials/jndi/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/tutorials/jndi/</guid>
      <description>Java Naming and Directory Interface (JNDI) The driver includes a JNDI ObjectFactory implementation, MongoClientFactory (legacy version), that returns MongoClient instances based on a connection string.
Examples The configuration of the MongoClientFactory differs depending on the application server. Below are examples of a few popular ones.
Wildfly (formerly JBoss)  In a Wildfly installation, create a new module for MongoDB at modules/system/layers/base/org/mongodb/main.
 Copy the mongo-java-driver jar file into the module.</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>/mongo-java-driver/4.3/driver-reactive/reference/monitoring/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/reference/monitoring/</guid>
      <description>JMX Monitoring The driver uses JMX to create MXBeans that allow an application or end user to monitor various aspects of the driver.
The driver creates MXBean instances of a single type: ConnectionPoolStatisticsMBean. The driver registers one ConnectionPoolStatisticsMBean instance per each server it connects to. For example, in the case of a replica set, the driver creates an instance per each non-hidden member of the replica set.
Each MXBean instance is required to be registered with a unique object name, which consists of a domain and a set of named properties.</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>/mongo-java-driver/4.3/driver-scala/reference/monitoring/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/reference/monitoring/</guid>
      <description>JMX Monitoring The driver uses JMX to create MXBeans that allow an application or end user to monitor various aspects of the driver.
The driver creates MXBean instances of a single type: ConnectionPoolStatisticsMBean. The driver registers one ConnectionPoolStatisticsMBean instance per each server it connects to. For example, in the case of a replica set, the driver creates an instance per each non-hidden member of the replica set.
Each MXBean instance is required to be registered with a unique object name, which consists of a domain and a set of named properties.</description>
    </item>
    
    <item>
      <title>Monitoring</title>
      <link>/mongo-java-driver/4.3/driver/reference/monitoring/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:26 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/reference/monitoring/</guid>
      <description>JMX Monitoring The driver uses JMX to create MXBeans that allow an application or end user to monitor various aspects of the driver.
The driver creates MXBean instances of a single type: ConnectionPoolStatisticsMBean. The driver registers one ConnectionPoolStatisticsMBean instance per each server it connects to. For example, in the case of a replica set, the driver creates an instance per each non-hidden member of the replica set.
Each MXBean instance is required to be registered with a unique object name, which consists of a domain and a set of named properties.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/mongo-java-driver/4.3/driver-reactive/reference/logging/</link>
      <pubDate>Wed, 18 Mar 2015 21:14:20 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/reference/logging/</guid>
      <description> Logging By default, logging is enabled via the popular SLF4J API. Logging is optional: the driver will use SLF4J if the driver detects the presence of SLF4J API (class org.slf4j.Logger) in the classpath. Otherwise, the driver will log a single warning via JUL (java.util.logging) and otherwise logging will be disabled.
The driver uses the following logger names:
 org.mongodb.driver: the root logger  cluster: for logs related to monitoring of the MongoDB servers to which the driver connects connection: for logs related to connections and connection pools protocol: for logs related to protocol message sent to and received from a MongoDB server  insert: for logs related to insert messages and responses update: for logs related to update messages and responses delete: for logs related to delete messages and responses query: for logs related to query messages and responses getmore: for logs related to getmore messages and responses killcursor: for logs related to killcursor messages and responses command: for logs related to command messages and responses  uri: for logs related to connection string parsing management: for logs related to JMX   </description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/mongo-java-driver/4.3/driver-scala/reference/logging/</link>
      <pubDate>Wed, 18 Mar 2015 21:14:20 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/reference/logging/</guid>
      <description> Logging By default, logging is enabled via the popular SLF4J API. Logging is optional: the driver will use SLF4J if the driver detects the presence of SLF4J API (class org.slf4j.Logger) in the classpath. Otherwise, the driver will log a single warning via JUL (java.util.logging) and otherwise logging will be disabled.
The driver uses the following logger names:
 org.mongodb.driver: the root logger  cluster: for logs related to monitoring of the MongoDB servers to which the driver connects connection: for logs related to connections and connection pools protocol: for logs related to protocol message sent to and received from a MongoDB server  insert: for logs related to insert messages and responses update: for logs related to update messages and responses delete: for logs related to delete messages and responses query: for logs related to query messages and responses getmore: for logs related to getmore messages and responses killcursor: for logs related to killcursor messages and responses command: for logs related to command messages and responses  uri: for logs related to connection string parsing management: for logs related to JMX   </description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/mongo-java-driver/4.3/driver/reference/logging/</link>
      <pubDate>Wed, 18 Mar 2015 21:14:20 -0400</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/reference/logging/</guid>
      <description> Logging By default, logging is enabled via the popular SLF4J API. Logging is optional: the driver will use SLF4J if the driver detects the presence of SLF4J API (class org.slf4j.Logger) in the classpath. Otherwise, the driver will log a single warning via JUL (java.util.logging) and otherwise logging will be disabled.
The driver uses the following logger names:
 org.mongodb.driver: the root logger  cluster: for logs related to monitoring of the MongoDB servers to which the driver connects connection: for logs related to connections and connection pools protocol: for logs related to protocol message sent to and received from a MongoDB server  insert: for logs related to insert messages and responses update: for logs related to update messages and responses delete: for logs related to delete messages and responses query: for logs related to query messages and responses getmore: for logs related to getmore messages and responses killcursor: for logs related to killcursor messages and responses command: for logs related to command messages and responses  uri: for logs related to connection string parsing management: for logs related to JMX   </description>
    </item>
    
    <item>
      <title>Issues &amp; Help</title>
      <link>/mongo-java-driver/4.3/issues-help/</link>
      <pubDate>Wed, 18 Mar 2015 16:56:14 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/issues-help/</guid>
      <description>Issues &amp;amp; Help We are lucky to have a vibrant MongoDB Java community with lots of varying experience of using the Java driver. We often find the quickest way to get support for general questions is through the MongoDB Community Forums or through stackoverflow. Please also refer to our own support channels documentation.
Bugs / Feature Requests If you think you’ve found a bug or want to see a new feature in the Java driver, please open a case in our issue management tool, JIRA:</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>/mongo-java-driver/4.3/driver-reactive/getting-started/installation/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/getting-started/installation/</guid>
      <description> Installation The recommended way to get started using one of the drivers in your project is with a dependency management system.
 MongoDB Reactive Streams Driver The Reactive Streams implementation for asynchronous stream processing with non-blocking back pressure.
&amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mongodb&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mongodb-driver-reactivestreams&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.3.0-beta3&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;    dependencies { compile &#39;org.mongodb:mongodb-driver-reactivestreams:4.3.0-beta3&#39; }    libraryDependencies += &#34;org.mongodb&#34; %% &#34;mongodb-driver-reactivestreams&#34; % &#34;4.3.0-beta3&#34;  </description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>/mongo-java-driver/4.3/driver-scala/getting-started/installation/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/getting-started/installation/</guid>
      <description>Installation The recommended way to get started using one of the drivers in your project is with a dependency management system.
 MongoDB Scala Driver The Reactive Streams based Scala implementation for asynchronous stream processing with non-blocking back pressure.
Scala 2.12 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mongodb.scala&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mongo-scala-driver&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;4.3.0-beta3_2.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt;    dependencies { compile &#39;org.mongodb.scala:mongo-scala-driver:4.3.0-beta3_2.12&#39; }    libraryDependencies += &#34;org.mongodb.scala&#34; %% &#34;mongo-scala-driver&#34; % &#34;4.3.0-beta3&#34;  Scala 2.11 &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>/mongo-java-driver/4.3/driver/getting-started/installation/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/getting-started/installation/</guid>
      <description>Installation The recommended way to get started using one of the drivers in your project is with a dependency management system.
There are two Maven artifacts available in the release. The preferred artifact for new applications is mongodb-driver-sync however, we still publish the legacy mongodb-driver-legacy jar.
 MongoDB Driver Sync The MongoDB Driver mongodb-driver-sync is the synchronous Java driver containing only the generic MongoCollection interface that complies with a new cross-driver CRUD specification.</description>
    </item>
    
    <item>
      <title>Installation Guide</title>
      <link>/mongo-java-driver/4.3/bson/installation-guide/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/bson/installation-guide/</guid>
      <description>Installation The BSON library is a required dependency of all the MongoDB Java drivers and if using a dependency management system, it will be automatically installed alongside the driver, however, it can be used as a standalone library. The recommended way to get started using one of the drivers in your project is with a dependency management system.
 BSON This library comprehensively supports BSON, the data storage and network transfer format that MongoDB uses for &amp;ldquo;documents&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Java Driver</title>
      <link>/mongo-java-driver/4.3/driver/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/</guid>
      <description>MongoDB Driver 4.3 Documentation The following guide provides information on using the synchronous MongoDB Java Driver 4.3.
What&amp;rsquo;s New in 4.3 The What&amp;rsquo;s New guide explains the major new features of the driver.
If you are upgrading from the 3.x series of the driver, consult the Upgrading documentation for information on breaking changes.
Getting Started To get started, see the Installation Guide, the Quick Start Guide and the Quick Start with POJOs Guide.</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>/mongo-java-driver/4.3/driver-reactive/getting-started/quick-start/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/getting-started/quick-start/</guid>
      <description>MongoDB Reactive Streams Driver Quick Start The following code snippets come from the QuickTour.java example code that can be found with the reactive streams driver source on github.
Note See the installation guide for instructions on how to install the MongoDB Reactive Streams Java Driver.
 important This guide uses the Subscriber implementations as covered in the Quick Start Primer.
 Prerequisites  A running MongoDB on localhost using the default port for MongoDB 27017</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>/mongo-java-driver/4.3/driver-scala/getting-started/quick-start/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/getting-started/quick-start/</guid>
      <description>MongoDB Scala Driver Quick Start The following code snippets come from the QuickTour.java example code that can be found with the Scala driver source on github.
Note See the installation guide for instructions on how to install the MongoDB Scala Driver.
 important This guide uses the Observable implicits as covered in the Quick Start Primer.
 Prerequisites  A running MongoDB on localhost using the default port for MongoDB 27017</description>
    </item>
    
    <item>
      <title>Quick Start</title>
      <link>/mongo-java-driver/4.3/driver/getting-started/quick-start/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/getting-started/quick-start/</guid>
      <description>MongoDB Driver Quick Start Note The following code snippets come from the QuickTour.java example code that can be found with the driver source on github.
 Prerequisites  A running MongoDB on localhost using the default port for MongoDB 27017
 MongoDB Driver. See Installation for instructions on how to install the MongoDB driver.
 The following import statements:
  New MongoClient API (since 3.7):
import com.mongodb.ConnectionString; import com.</description>
    </item>
    
    <item>
      <title>Quick Start Primer</title>
      <link>/mongo-java-driver/4.3/driver-reactive/getting-started/quick-start-primer/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/getting-started/quick-start-primer/</guid>
      <description>Quick Start Primer The aim of this guide is to provide background about the MongoDB Reactive Streams driver and its asynchronous API before going onto looking at how to use the driver and MongoDB.
Note See the installation guide for instructions on how to install the MongoDB Reactive Streams Driver.
 Reactive Streams This library is an implementation of the reactive streams specification and the reactive stream API consists of the following components:</description>
    </item>
    
    <item>
      <title>Quick Start Primer</title>
      <link>/mongo-java-driver/4.3/driver-scala/getting-started/quick-start-primer/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/getting-started/quick-start-primer/</guid>
      <description>Quick Start Primer The aim of this guide is to provide background about the Scala driver and its asynchronous API before going onto looking at how to use the driver and MongoDB.
Note See the installation guide for instructions on how to install the MongoDB Scala Driver.
 Reactive Streams The MongoDB Scala driver is now built upon the MongoDB Reactive Streams driver and is an implementation of the reactive streams specification and the reactive stream API consists of the following components:</description>
    </item>
    
    <item>
      <title>Reactive Streams</title>
      <link>/mongo-java-driver/4.3/driver-reactive/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/</guid>
      <description>MongoDB Reactive Streams Driver Documentation The following guide provides information on using the MongoDB Reactive Streams Driver.
Getting Started To get started, see the Installation Guide, the Quick Start Guide and the Quick Start with POJOs Guide.
Tutorials For tutorials for some frequently used operations, see the Tutorials section.
Previous Releases    Release Documentation     4.1.1 Reference &amp;#124; API   4.0.5 Reference &amp;#124; API   1.</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/mongo-java-driver/4.3/driver-reactive/reference/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-reactive/reference/</guid>
      <description>Reference The reference documentation for the Java driver focuses on high-level documentation and use-cases.
 Logging
 Monitoring
  See also Javadoc-generated API.</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/mongo-java-driver/4.3/driver-scala/reference/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/reference/</guid>
      <description>Reference The reference documentation for the Java driver focuses on high-level documentation and use-cases.
 Logging
 Monitoring
  See also ScalaDoc-generated API.</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/mongo-java-driver/4.3/driver/reference/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver/reference/</guid>
      <description>Reference The reference documentation for the Java driver focuses on high-level documentation and use-cases.
 Logging
 Monitoring
  See also Javadoc-generated API.</description>
    </item>
    
    <item>
      <title>Scala Driver</title>
      <link>/mongo-java-driver/4.3/driver-scala/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/driver-scala/</guid>
      <description>MongoDB Scala Driver Documentation The following guide provides information on using the MongoDB Scala Driver.
Getting Started To get started, see the Installation Guide, the Quick Start Guide and the Quick Start with Case Classes.
Tutorials For tutorials for some frequently used operations, see the Tutorials section.
Previous Releases    Release Documentation     4.1.1 Reference &amp;#124; API   4.0.5 Reference &amp;#124; API   2.</description>
    </item>
    
    <item>
      <title>index</title>
      <link>/mongo-java-driver/4.3/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/mongo-java-driver/4.3/</guid>
      <description>MongoDB Java Driver Documentation Welcome to the MongoDB JVM driver documentation hub for the 4.3 drivers release.
What&amp;rsquo;s New in 4.3 For key new features of 4.3, see What&amp;rsquo;s New.
Upgrade To upgrade, refer to the Upgrade Considerations documentation.
MongoDB Driver For the synchronous MongoDB Driver, see MongoDB Driver section.
MongoDB Reactive Streams Driver For the MongoDB Reactive Streams Driver, see MongoDB Reactive Streams Driver section.
MongoDB Scala Driver For the MongoDB Scala Driver, see MongoDB Scala Driver section.</description>
    </item>
    
  </channel>
</rss>